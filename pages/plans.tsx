import Table from "@/components/Table";
import useAuth from "@/hooks/useAuth";
import { loadCheckout, payments } from "@/lib/stripe";
import { getProducts, Product } from "@stripe/firestore-stripe-payments";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { HiCheck } from "react-icons/hi";
import { useState } from "react";
import Loader from "@/components/Loader";
import { SubmitHandler, useForm } from "react-hook-form";
import useSubscription from "@/hooks/useSubscription";

interface Props {
    products: Product[];
}

interface Inputs {
    email: string;
    password: string;
}

function Plans({ products }: Props) {
    const { logout, user } = useAuth();
    const [selectedPlan, setSelectedPlan] = useState<Product>(products[2]);
    const [isBillingLoading, setIsBillingLoading] = useState(false);
    const { signUp } = useAuth();
    const subscription = useSubscription(user);

    const {
        register,
        handleSubmit,
        watch,
        formState: { errors },
    } = useForm<Inputs>();
    const onSubmit: SubmitHandler<Inputs> = async (data) => {
        await signUp(data.email, data.password);
        subscribeToPlan();
    };

    async function subscribeToPlan() {
        if (!user) return;

        if (!subscription) {
            loadCheckout(selectedPlan.prices[0].id);
            setIsBillingLoading(true);
        } else {
            alert("You are already subscribed");
        }
    }

    return (
        <div>
            <Head>
                <title>Netflix - Plans</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/iconNetflix.png" />
            </Head>

            <header>
                <Link href="/login">
                    <Image
                        src="https://rb.gy/ulxxee"
                        alt="Netflix"
                        width={150}
                        height={90}
                        className="cursor-pointer object-contain"
                    />
                </Link>

                {user ? (
                    <button
                        className="text-lg font-medium hover:underline"
                        onClick={logout}
                    >
                        Sign Out
                    </button>
                ) : (
                    <Link href={"/login"}>
                        <button className="text-lg font-medium hover:underline">
                            Back to Login
                        </button>
                    </Link>
                )}
            </header>

            <main className=" pt-28 lg:w-[1000px] m-auto pb-12 transition-all md:px-10">
                <h1 className=" mb-3 text-3xl px-2 font-medium">
                    Choose the plan that&apos;s right for you
                </h1>

                <ul className=" px-2">
                    <li className="flex items-center gap-x-2 text-lg">
                        <HiCheck className="h-7 w-7 text-[#E50914]" /> Watch all
                        you want. Ad-free.
                    </li>
                    <li className="flex items-center gap-x-2 text-lg">
                        <HiCheck className="h-7 w-7 text-[#E50914]" />{" "}
                        Recommendations just for you.
                    </li>
                    <li className="flex items-center gap-x-2 text-lg">
                        <HiCheck className="h-7 w-7 text-[#E50914]" /> Change or
                        cancel your plan anytime.
                    </li>
                </ul>

                <div className="mt-4 flex flex-col space-y-4">
                    <div className="flex w-full items-center self-end md:w-3/5">
                        {products.map((product) => (
                            <div
                                key={product.id}
                                className={`planBox ${
                                    selectedPlan?.id === product.id
                                        ? "opacity-100"
                                        : "opacity-60"
                                }`}
                                onClick={() => setSelectedPlan(product)}
                            >
                                {product.name}
                            </div>
                        ))}
                    </div>

                    <Table products={products} selectedPlan={selectedPlan} />

                    {!user && (
                        <form
                            onSubmit={handleSubmit(onSubmit)}
                            className="relative mt-24 space-y-8 rounded py-10 px-2"
                        >
                            <h1 className=" text-3xl font-medium">
                                Create a password to start your membership
                            </h1>
                            <p className="text-lg">
                                Just a few more steps and you&apos;re finished!
                                We hate paperwork, too.
                            </p>
                            <div className=" space-y-4 md:space-x-[2%]">
                                <label className="inline-block w-full md:w-[48%]">
                                    <input
                                        type="email"
                                        placeholder="Email"
                                        className=" input"
                                        {...register("email", {
                                            required: true,
                                        })}
                                    />
                                    {errors.email && (
                                        <p className="p-1 text-[13px] text-orange-500">
                                            Please enter a valid email.
                                        </p>
                                    )}
                                </label>
                                <label className="inline-block w-full md:w-[48%]">
                                    <input
                                        type="password"
                                        placeholder="Password"
                                        className="input"
                                        {...register("password", {
                                            required: true,
                                        })}
                                    />
                                    {errors.password && (
                                        <p className="p-1 text-[13px]  text-orange-500">
                                            Your password must contain between 4
                                            and 60 characters.
                                        </p>
                                    )}
                                </label>
                            </div>
                            <button
                                disabled={!selectedPlan || isBillingLoading}
                                className={`w-11/12 rounded bg-[#E50914] py-4 text-xl shadow hover:bg-[#f6121d] md:w-[400px] block m-auto ${
                                    isBillingLoading && "opacity-60"
                                }`}
                            >
                                {isBillingLoading ? (
                                    <Loader color="dark:fill-gray-300" />
                                ) : (
                                    "Create Account & Subscribe"
                                )}
                            </button>
                        </form>
                    )}

                    {user && (
                        <button
                            disabled={!selectedPlan || isBillingLoading}
                            className={`w-11/12 rounded bg-[#E50914] py-4 text-xl shadow hover:bg-[#f6121d] md:w-[400px] block m-auto ${
                                isBillingLoading && "opacity-60"
                            }`}
                            onClick={subscribeToPlan}
                        >
                            {isBillingLoading ? (
                                <Loader color="dark:fill-gray-300" />
                            ) : (
                                "Subscribe"
                            )}
                        </button>
                    )}
                </div>
            </main>
        </div>
    );
}

export default Plans;

export async function getServerSideProps() {
    const products = await getProducts(payments, {
        includePrices: true,
        activeOnly: true,
    })
        .then((res) => res)
        .catch((error) => console.log(error.message));

    return { props: { products } };
}
